/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
//package com.mycompany.bookingportal;

import javax.swing.*;
import javax.swing.table.*;
//import java.util.*;
import java.time.*;
import java.time.format.*;
import java.text.NumberFormat;

/**
 *
 * @author MaliaCherry
 */
//ADD COMMENTS TO EVERY METHOD, CLEAN UP IMPORT WITHIN PROGRAM, TEST BY FILLING EACH AVAILABLE ROOM
public class BookingPortalUI extends javax.swing.JFrame {

    DefaultTableModel table;

    /**
     * Creates new form BookingPortalUI
     */
    public BookingPortalUI() {
        String[] availableRooms = {"Standard", "Standard", "Standard", "Standard", "Standard",
            "Standard", "Standard", "Standard", "Standard", "Standard",
            "Junior", "Junior", "Junior", "Junior", "Junior", "Junior",
            "Luxury", "Luxury", "Luxury", "Luxury"};
        Integer[] roomNumbers = {100, 101, 102, 103, 104,
            105, 106, 107, 108, 109,
            200, 201, 202, 203, 204,
            205, 300, 301, 302, 303};
        initComponents();

        for (int i = 0; i < 20; i++) {
            switch (availableRooms[i]) {
                case "Standard": {
                    FillTable(roomNumbers[i], availableRooms[i], 150, false);
                    break;
                }
                case "Junior": {
                    FillTable(roomNumbers[i], availableRooms[i], 200, false);
                    break;
                }
                default: {
                    FillTable(roomNumbers[i], availableRooms[i], 240, false);
                }
            }
        }
    }

    /*
    * ADD COMMENTS
     */
    private void FillTable(Integer number, String type, Integer rate, Boolean booked) {
        table = (DefaultTableModel) roomList.getModel();
        Object[] rowData = {number, type, rate, booked};
        table.addRow(rowData);
    }

    /**
     *
     *
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        datePanel = new javax.swing.JPanel();
        inLabel = new javax.swing.JLabel();
        OutLabel = new javax.swing.JLabel();
        inDate = new javax.swing.JFormattedTextField();
        outDate = new javax.swing.JFormattedTextField();
        updateButton = new javax.swing.JButton();
        infoPanel = new javax.swing.JPanel();
        firstNameLabel = new javax.swing.JLabel();
        lastNameLabel = new javax.swing.JLabel();
        selectorLabel = new javax.swing.JLabel();
        roomSelector = new javax.swing.JComboBox<>();
        firstName = new javax.swing.JTextField();
        lastName = new javax.swing.JTextField();
        outputPanel = new javax.swing.JPanel();
        nightsLabel = new javax.swing.JLabel();
        subtotalLabel = new javax.swing.JLabel();
        subtotal = new javax.swing.JTextField();
        numNights = new javax.swing.JTextField();
        infoLabel = new javax.swing.JLabel();
        totalLabel = new javax.swing.JLabel();
        grandTotal = new javax.swing.JTextField();
        bookButton = new javax.swing.JButton();
        scroll = new javax.swing.JScrollPane();
        roomList = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Mariott Reservation System");
        setBounds(new java.awt.Rectangle(0, 0, 0, 0));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setResizable(false);

        datePanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        inLabel.setLabelFor(inDate);
        inLabel.setText("Check-In Date:");
        inLabel.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));

        OutLabel.setLabelFor(outDate);
        OutLabel.setText("Check-Out Date:");
        OutLabel.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        inDate.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("MM/dd/yyyy"))));
        inDate.setText("mm/dd/yyyy");
        inDate.setActionCommand("<Not Set>");
        inDate.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        inDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                inDateFocusLost(evt);
            }
        });

        outDate.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("MM/dd/yyyy"))));
        outDate.setText("mm/dd/yyyy");
        outDate.setToolTipText("");
        outDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                outDateFocusLost(evt);
            }
        });

        updateButton.setText("Update");
        updateButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        updateButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                updateButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout datePanelLayout = new javax.swing.GroupLayout(datePanel);
        datePanel.setLayout(datePanelLayout);
        datePanelLayout.setHorizontalGroup(
            datePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(datePanelLayout.createSequentialGroup()
                .addGroup(datePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(OutLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(datePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(datePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(inDate, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(datePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(datePanelLayout.createSequentialGroup()
                                    .addContainerGap()
                                    .addComponent(inLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(datePanelLayout.createSequentialGroup()
                                    .addGap(21, 21, 21)
                                    .addComponent(outDate, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGroup(datePanelLayout.createSequentialGroup()
                            .addGap(46, 46, 46)
                            .addComponent(updateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        datePanelLayout.setVerticalGroup(
            datePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(datePanelLayout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(inLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(inDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(OutLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(outDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(updateButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        infoPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        firstNameLabel.setLabelFor(firstName);
        firstNameLabel.setText("First Name: ");

        lastNameLabel.setLabelFor(lastName);
        lastNameLabel.setText("Last Name:");

        selectorLabel.setLabelFor(roomSelector);
        selectorLabel.setText("Room Type:");

        roomSelector.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "", "Standard Room", "Junior Suite", "Luxury Suite" }));
        roomSelector.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                roomSelectorItemStateChanged(evt);
            }
        });

        firstName.setInheritsPopupMenu(true);

        javax.swing.GroupLayout infoPanelLayout = new javax.swing.GroupLayout(infoPanel);
        infoPanel.setLayout(infoPanelLayout);
        infoPanelLayout.setHorizontalGroup(
            infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(infoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(infoPanelLayout.createSequentialGroup()
                        .addGap(0, 19, Short.MAX_VALUE)
                        .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(firstName, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lastName, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(roomSelector, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(34, 34, 34))
                    .addGroup(infoPanelLayout.createSequentialGroup()
                        .addGroup(infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(firstNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lastNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(selectorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        infoPanelLayout.setVerticalGroup(
            infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(infoPanelLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(firstNameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(firstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lastNameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(selectorLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(roomSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(33, Short.MAX_VALUE))
        );

        outputPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        nightsLabel.setLabelFor(numNights);
        nightsLabel.setText("No. of Nights:");

        subtotalLabel.setLabelFor(subtotal);
        subtotalLabel.setText("Subtotal:");

        subtotal.setEditable(false);
        subtotal.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        subtotal.setFocusable(false);

        numNights.setEditable(false);
        numNights.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        numNights.setFocusable(false);

        totalLabel.setText("Total:");

        grandTotal.setEditable(false);
        grandTotal.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        grandTotal.setFocusable(false);

        javax.swing.GroupLayout outputPanelLayout = new javax.swing.GroupLayout(outputPanel);
        outputPanel.setLayout(outputPanelLayout);
        outputPanelLayout.setHorizontalGroup(
            outputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(outputPanelLayout.createSequentialGroup()
                .addGroup(outputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(outputPanelLayout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(nightsLabel)
                        .addGap(6, 6, 6))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, outputPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(outputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(totalLabel)
                            .addComponent(subtotalLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(outputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(numNights, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(subtotal, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(grandTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(69, 69, 69)
                .addComponent(infoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        outputPanelLayout.setVerticalGroup(
            outputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(outputPanelLayout.createSequentialGroup()
                .addGroup(outputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(outputPanelLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(outputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(numNights, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nightsLabel))
                        .addGap(8, 8, 8)
                        .addGroup(outputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(subtotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(subtotalLabel))
                        .addGap(8, 8, 8)
                        .addGroup(outputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(grandTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(totalLabel)))
                    .addGroup(outputPanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(infoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        bookButton.setText("Book");
        bookButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        bookButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bookButtonMouseClicked(evt);
            }
        });

        roomList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Room No.", "Room Type", "Cost/night", "Booked?"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        roomList.getTableHeader().setResizingAllowed(false);
        roomList.getTableHeader().setReorderingAllowed(false);
        roomList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                roomListMouseClicked(evt);
            }
        });
        scroll.setViewportView(roomList);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(190, 190, 190)
                .addComponent(bookButton, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(outputPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(scroll, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(datePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(infoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(infoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(datePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(outputPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scroll, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bookButton)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        

    /*
    * ADD COMMENTS
     */
    private int getDifference(LocalDate startDate, LocalDate endDate) {
        LocalDate today = LocalDate.now();

        if (startDate.isBefore(today) || endDate.isBefore(today)) {
            JOptionPane.showMessageDialog(null, "Dates cannot be a date in the past", "Invalid Dates", JOptionPane.WARNING_MESSAGE);
            if (roomList.getSelectedRow() != -1) {
                roomList.clearSelection();
            }
            return 0;
        }
        Period nights = Period.between(startDate, endDate);
        if (nights.getMonths() != 0 || nights.getYears() != 0) {
            JOptionPane.showMessageDialog(null, "Reservations cannot be longer than 30 days", "Invalid Dates", JOptionPane.WARNING_MESSAGE);
            if (roomList.getSelectedRow() != -1) {
                roomList.clearSelection();
            }
            return 0;
        } else if (nights.getDays() < 0) {
            JOptionPane.showMessageDialog(null, "Select valid check-in and check-out dates", "Invalid Dates", JOptionPane.WARNING_MESSAGE);
            if (roomList.getSelectedRow() != -1) {
                roomList.clearSelection();
            }
            return 0;
        }
        return nights.getDays();
    }

    /*
    * ADD COMMENTS
     */
    private void filter(String room) {
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(table);
        roomList.setRowSorter(sorter);

        switch (room) {
            case "Standard Room": {
                sorter.setRowFilter(RowFilter.regexFilter("Standard"));
                break;
            }
            case "Junior Suite": {
                sorter.setRowFilter(RowFilter.regexFilter("Junior"));
                break;
            }
            case "Luxury Suite": {
                sorter.setRowFilter(RowFilter.regexFilter("Luxury"));
                break;
            }
            default: {
                roomList.setRowSorter(sorter);
            }
        }
    }

    /*
    * ADD COMMENTS
     */
    private int makeReservation() {
        if (roomList.getSelectedRow() == -1) {
            return 0;
        } else {
            int modelRow = roomList.convertRowIndexToModel(roomList.getSelectedRow());
            String num = roomList.getModel().getValueAt(modelRow, 0).toString();
            String room = roomList.getModel().getValueAt(modelRow, 1).toString();
            boolean booked = (Boolean) roomList.getModel().getValueAt(modelRow, 3);
            String nameRegex = "^[a-zA-Z]+$", dateRegex = "^(1[0-2]|0[1-9])\\/(3[01]|[12][0-9]|0[1-9])\\/[0-9]{4}";

            if (!(firstName.getText().matches(nameRegex)) || !(lastName.getText().matches(nameRegex))) {
                return 1;
            } else if (!(inDate.getText().matches(dateRegex)) || !(outDate.getText().matches(dateRegex))) {
                return 2;
            } else if (numNights.getText().equals("") || subtotal.getText().equals("")) {
                return 3;
            } else {
                if (booked == true) {
                    return 4;
                } else {
                    roomList.getModel().setValueAt(true, modelRow, 3);
                    JOptionPane.showMessageDialog(null, "Booked by: " + firstName.getText() + " " + lastName.getText()
                            + "\nCheck-In Date: " + inDate.getText() + ", 3 p.m.\nCheck-Out Date: " + outDate.getText()
                            + ", 11 a.m.\nRoom: " + room + ", " + num + "\nTotal: " + grandTotal.getText(),
                            "Booking Confirmation", JOptionPane.PLAIN_MESSAGE);
                    firstName.setText("");
                    lastName.setText("");
                    inDate.setText("mm/dd/yyyy");
                    outDate.setText("mm/dd/yyyy");
                    numNights.setText("");
                    subtotal.setText("");
                    grandTotal.setText("");
                    roomSelector.setSelectedIndex(0);
                    infoLabel.setText("");
                    roomList.clearSelection();
                    return Integer.parseInt(num);
                }
            }
        }
    }

    /*
    * ADD COMMENTS
     */
    private void bookButtonMouseClicked(java.awt.event.MouseEvent evt) {                                        
        //TO DO: FIX DEFAULT METHOD -- SHOULD PROPERLY STORE INFORMATION FOR BOOKED ROOM
        int result = makeReservation();
        switch (result) {
            case (0): {
                JOptionPane.showMessageDialog(null, "Please select a room", "Selection Required", JOptionPane.ERROR_MESSAGE);
                break;
            }
            case (1): {
                JOptionPane.showMessageDialog(null, "Enter first and last name", "Invalid Name", JOptionPane.WARNING_MESSAGE);
                break;
            }
            case (2): {
                JOptionPane.showMessageDialog(null, "Enter check-in and check-out dates", "Invalid Date", JOptionPane.WARNING_MESSAGE);
                break;
            }
            case (3): {
                JOptionPane.showMessageDialog(null, "Hit Update to confirm total before booking", "More Information", JOptionPane.WARNING_MESSAGE);
                break;
            }
            case (4): {
                JOptionPane.showMessageDialog(null,
                        "This room is already booked. Please select an available room.", "Room Unavailable",
                        JOptionPane.ERROR_MESSAGE);
                break;
            }
        }
    }                                       

    /*
    * ADD COMMENTS
     */
    private void updateButtonMouseClicked(java.awt.event.MouseEvent evt) {                                          
        double taxes = 0.08875, postTax;
        String checkIn = inDate.getText();
        String checkOut = outDate.getText();
        String regex = "^(1[0-2]|0[1-9])\\/(3[01]|[12][0-9]|0[1-9])\\/[0-9]{4}";
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("MM/dd/yyyy");
        NumberFormat money = NumberFormat.getCurrencyInstance();

        if (!checkIn.matches(regex)) {
            JOptionPane.showMessageDialog(null, "Enter a valid check-in date\n Format: mm/dd/yyyy", "Invalid Check-In Date", JOptionPane.WARNING_MESSAGE);
        } else if (!checkOut.matches(regex)) {
            JOptionPane.showMessageDialog(null, "Enter a valid check-out date\n Format: mm/dd/yyyy", "Invalid Check-Out Date", JOptionPane.WARNING_MESSAGE);
        } else {
            LocalDate start = LocalDate.parse(inDate.getText(), formatter);
            LocalDate finish = LocalDate.parse(outDate.getText(), formatter);
            int difference = getDifference(start, finish);

            if (difference == 0) {
                numNights.setText("");
            } else {
                numNights.setText("" + difference);
            }

            if (subtotal.getText().equals("")) {
                if (roomList.getSelectedRow() == -1) {
                    subtotal.setText("");
                } else {
                    int modelRow = roomList.convertRowIndexToModel(roomList.getSelectedRow());
                    Integer rate = (Integer) (roomList.getModel().getValueAt(modelRow, 2));
                    Integer preTax = rate * Integer.valueOf(numNights.getText());
                    subtotal.setText(money.format(preTax));
                    postTax = preTax.doubleValue() * taxes;
                    postTax += preTax.doubleValue();
                    grandTotal.setText(money.format(postTax));
                }
            }
        }

    }                                         

    /*
    * ADD COMMENTS
     */
    private void roomListMouseClicked(java.awt.event.MouseEvent evt) {                                      
        Integer rate, preTax;
        double taxes = 0.08875, postTax;
        String selectedRoom;
        Boolean booked;
        int modelRow = roomList.convertRowIndexToModel(roomList.getSelectedRow());
        selectedRoom = roomList.getModel().getValueAt(modelRow, 1).toString();
        booked = (Boolean) roomList.getModel().getValueAt(modelRow, 3);
        NumberFormat money = NumberFormat.getCurrencyInstance();

        if (booked) {
            infoLabel.setText("Unavailable");
        } else {
            switch (selectedRoom) {
                case "Standard": {
                    infoLabel.setText("<html>Standard Room:<br/>One Queen Bed</html>");
                    break;
                }
                case "Junior": {
                    infoLabel.setText("<html>Junior Room:<br/>One Queen Bed<br/>Two Sofas</html>");
                    break;
                }
                case "Luxury": {
                    infoLabel.setText("<html>Luxury Room:<br/>One Queen Bed<br/>Two Sofas<br/>Openable Glass Door</html>");
                    break;
                }
                default: {
                    infoLabel.setText("");
                }
            }
            if (!(numNights.getText().equals(""))) {
                rate = (Integer) (roomList.getModel().getValueAt(modelRow, 2));
                preTax = rate * Integer.valueOf(numNights.getText());
                subtotal.setText(money.format(preTax));
                postTax = preTax.doubleValue() * taxes;
                postTax += preTax.doubleValue();
                grandTotal.setText(money.format(postTax));
            } else {
                subtotal.setText("");
            }
        }
    }                                     

    /*
    * ADD COMMENTS
     */
    private void roomSelectorItemStateChanged(java.awt.event.ItemEvent evt) {                                              
        String query = roomSelector.getSelectedItem().toString();

        filter(query);
    }                                             

    private void inDateFocusLost(java.awt.event.FocusEvent evt) {                                 
        String checkIn = inDate.getText();
        String checkOut = outDate.getText();
        String regex = "^(1[0-2]|0[1-9])\\/(3[01]|[12][0-9]|0[1-9])\\/[0-9]{4}";

        if (checkIn.matches(regex) && checkOut.matches(regex)) {
            if (!(subtotal.getText().equals(""))) {
               subtotal.setText("");
               grandTotal.setText("");
               numNights.setText("");
            } 
        }
    }                                

    private void outDateFocusLost(java.awt.event.FocusEvent evt) {                                  
        String checkIn = inDate.getText();
        String checkOut = outDate.getText();
        String regex = "^(1[0-2]|0[1-9])\\/(3[01]|[12][0-9]|0[1-9])\\/[0-9]{4}";

        if (checkIn.matches(regex) && checkOut.matches(regex)) {
            if (!(subtotal.getText().equals(""))) {
               subtotal.setText("");
               grandTotal.setText("");
               numNights.setText("");
            } 
        }
    }                                 
    /*   */


    // Variables declaration - do not modify                     
    private javax.swing.JLabel OutLabel;
    private javax.swing.JButton bookButton;
    private javax.swing.JPanel datePanel;
    private javax.swing.JTextField firstName;
    private javax.swing.JLabel firstNameLabel;
    private javax.swing.JTextField grandTotal;
    private javax.swing.JFormattedTextField inDate;
    private javax.swing.JLabel inLabel;
    private javax.swing.JLabel infoLabel;
    private javax.swing.JPanel infoPanel;
    private javax.swing.JTextField lastName;
    private javax.swing.JLabel lastNameLabel;
    private javax.swing.JLabel nightsLabel;
    private javax.swing.JTextField numNights;
    private javax.swing.JFormattedTextField outDate;
    private javax.swing.JPanel outputPanel;
    private javax.swing.JTable roomList;
    private javax.swing.JComboBox<String> roomSelector;
    private javax.swing.JScrollPane scroll;
    private javax.swing.JLabel selectorLabel;
    private javax.swing.JTextField subtotal;
    private javax.swing.JLabel subtotalLabel;
    private javax.swing.JLabel totalLabel;
    private javax.swing.JButton updateButton;
    // End of variables declaration                   
}
